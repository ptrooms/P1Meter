; read https://docs.platformio.org/en/latest/core/userguide/cmd_run.html
; pio run -e p1meter-production_241_copy -t size
; pio run -e p1meter-production_241_copy  --list-targets
[env]
platform                = ${common.platform}
platform_packages       = ${common.platform_packages}
framework               = ${common.framework}
board                   = ${common.board}
board_build.ldscript    = ${common.board_build.ldscript}
board_build.flash_mode  = ${common.board_build.flash_mode}
board_build.f_flash     = ${common.board_build.f_flash}
board_build.f_cpu       = ${common.board_build.f_cpu}
build_unflags           = ${common.build_unflags}
build_flags             = ${common.build_flags}
monitor_speed           = ${common.monitor_speed}
upload_port             = ${common.upload_port}
upload_resetmethod      = ${common.upload_resetmethod}
upload_speed            = ${common.upload_speed}
extra_scripts           = ${common.extra_scripts}
lib_extra_dirs          = ${common.lib_extra_dirs}
lib_ignore              =
    Servo(esp8266)
    ESP8266AVRISP
    ESP8266LLMNR
    ESP8266NetBIOS
    ESP8266SSDP
    SP8266WiFiMesh
    Ethernet(esp8266)
    GDBStub
    TFT_Touch_Shield_V2
    ESP8266HTTPUpdateServer
    ESP8266WiFiMesh
    EspSoftwareSerial
    SPISlave
    Hash
; Disable next if you want to use ArduinoOTA in Tasmota (default disabled)
;    ArduinoOTA

[env:p1meter-production]
# monitor_port            = /dev/ttyUSB0
#   read: [https://pyserial.readthedocs.io/en/latest/url_handlers.html]
monitor_port            = socket://192.168.1.154:20108
monitor_filters         = log2file, time, default
upload_port             = 192.168.1.35
# upload_port             = socket://192.168.1.154:20108
upload_protocol         = espota
build_flags             = ${common.build_flags} -DPROD_MODE
                          -DNDEBUG 
                         ; - DDUP_MODE_NOINVERT = flag to use/r USB/serial for communications, else use inverted polarity
[env:p1meter-production_241]
# monitor_port            = /dev/ttyUSB0
#   read: [https://pyserial.readthedocs.io/en/latest/url_handlers.html]
# espressif8266@2.5.3 loads fromework 2.7.1
; platform                = espressif8266@2.5.3
platform                = platformio/espressif8266 @ 1.7.0
monitor_port            = socket://192.168.1.154:20108
; monitor_filters         = log2file, time, default, esp8266_exception_decoder
monitor_filters         = log2file, time, default
upload_port             = 192.168.1.35
upload_protocol         = espota
build_flags             = ${common.build_flags} -DPROD_MODE
                          -DNDEBUG 
; add disassemble via /home/pafoxp/code-P1Meter/post_build.py to firmware.lst
; read: https://docs.platformio.org/en/latest/scripting/custom_targets.html
extra_scripts = post_build.py
targets = disasm

[env:p1meter-production_241_copy]
# see for flags: https://docs.platformio.org/en/latest/platforms/espressif8266.html
# monitor_port            = /dev/ttyUSB0
#   read: [https://pyserial.readthedocs.io/en/latest/url_handlers.html]
# espressif8266@2.5.3 loads fromework 2.7.1
; platform                = espressif8266@2.5.3
platform                = platformio/espressif8266 @ 1.7.0
monitor_port            = /dev/ttyUSB1
; monitor_filters         = log2file, time, default, esp8266_exception_decoder
monitor_filters         = log2file, time, default
upload_port             = 192.168.1.185
upload_protocol         = espota
; --- see for debug options: file:///home/pafoxp/.platformio/packages/framework-arduinoespressif8266@1.20401.3/boards.txt
build_flags             = ${common.build_flags} -DPROD_MODE
                          -DCOP_MODE
                        ; # -DOTA_DEBUG="Serial"    ; set in ArduinoOTA.cpp when DEBUG_SERIAL
                        ; -DNDEBUG      ; assert state something confidently and forcefully
                          -DDEBUG_SERIAL="Serial"       ;  !defined(NDEBUG)
                          -DDEBUG_ESP_PORT="Serial"
                          
                          -DDEBUG_ESP_WIFI  ; v58b                           
                          -DDEBUG_ESP_OTA
                          -DDEBUG_ESP_MDNS                          
                          -DDEBUG_ESP_DNS

                        ; -DDEBUG_ESP_CORE
                        
                        ; -DDEBUG_ESP_UPDATER
                        ; -DDEBUG_ESP_WIFI      ; case WL_CONNECTED:

                        ; -DDEBUG_ESP_SSL
                        ; -DEBUG_ESP_HTTP_CLIENT
                        ; -DDEBUG_ESP_MDNS
                        ; -DDEBUG_ESP_HTTP_SERVER
                        ; -DDEBUG_ESP_DNS
                        ; -DDEBUG_ESP_HTTP_UPDATE
                        ; -DDEBUG_ESP_OTA
                        ; -DDEBUG_ESP_OOM 
                            ; -include "umm_malloc/umm_malloc_cfg.h"
                        ; not sure but found in folders
                        ; -; file:///home/pafoxp/.platformio/packages/framework-arduinoespressif8266@1.20401.3/tools/sdk/lwip2/include/lwipopts.h
                        ; -DPPP_DEBUG

; add disassemble via /home/pafoxp/code-P1Meter/post_build.py to firmware.lst
; read: https://docs.platformio.org/en/latest/scripting/custom_targets.html
; extra_scripts = post_build.py
; targets = disasm

[env:p1meter-production_271]
# monitor_port            = /dev/ttyUSB0
#   read: [https://pyserial.readthedocs.io/en/latest/url_handlers.html]
# espressif8266@2.5.3 loads fromework 2.7.1
platform                = espressif8266@2.5.3
monitor_port            = socket://192.168.1.154:20108
; monitor_filters         = log2file, time, default, esp8266_exception_decoder
monitor_filters         = log2file, time, default
upload_port             = 192.168.1.35
upload_protocol         = espota
build_flags             = ${common.build_flags} -DPROD_MODE
                          -DNDEBUG 
                         ; - DDUP_MODE_NOINVERT = flag to use/r USB/serial for communications, else use inverted polarity
; add disassemble via /home/pafoxp/code-P1Meter/post_build.py to firmware.lst
; read: https://docs.platformio.org/en/latest/scripting/custom_targets.html
extra_scripts = post_build.py
targets = disasm



[env:t1meter-test-OTA_241]
; platform                = espressif8266@2.5.3
platform                = platformio/espressif8266 @ 1.7.0
upload_port             = 192.168.1.185
monitor_port            = /dev/ttyUSB1
monitor_echo            = yes
monitor_filters         = log2file, time, default, esp8266_exception_decoder
build_type              = debug
build_flags             = ${common.build_flags} -DTEST_MODE
; DUP_MODE_NOINVERT normally Testmode is non-inverted in program, with inversion transistor we reverse
; see for build flags: https://docs.platformio.org/en/latest/platforms/espressif8266.html
; see for debugging: https://docs.espressif.com/projects/esp-faq/en/latest/development-environment/debugging.html
                         ; -DNDEBUG 
                          -DDEBUG_SERIAL="Serial"
                          -DDUP_MODE_NOINVERT 
                          -DDEBUG_ESP_WIFI  ; v58b 
                          -DDEBUG_ESP_CORE
upload_protocol         = espota
lib_extra_dirs          =
;   add disassemble via /home/pafoxp/code-P1Meter/post_build.py to firmware.lst
;   read: https://docs.platformio.org/en/latest/scripting/custom_targets.html
extra_scripts = post_build.py
targets = disasm



[env:t1meter-test-OTA_271]
platform                = espressif8266@2.5.3
; platform                    = platformio/espressif8266 @ 1.7.0
upload_port             = 192.168.1.185
monitor_port            = /dev/ttyUSB1
monitor_echo            = yes
monitor_filters         = log2file, time, default, esp8266_exception_decoder
build_type              = debug
build_flags             = ${common.build_flags} -DTEST_MODE
                          -DNDEBUG 
                          -DDEBUG_SERIAL="Serial"
; DUP_MODE_NOINVERT normally Testmode is non-inverted in program, with inversion transistor we reverse
                         -DDUP_MODE_NOINVERT 

                        ; -DDEBUG_ESP_WIFI
                        ; -DDEBUG_WIFI
                        ; -DDEBUG_ESP_PORT="Serial"
                        ; -DIP_DEBUG
                        ; -DLWIP_DEBUG


upload_protocol         = espota
lib_extra_dirs          =
; add disassemble via /home/pafoxp/code-P1Meter/post_build.py to firmware.lst
; read: https://docs.platformio.org/en/latest/scripting/custom_targets.html
extra_scripts = post_build.py
targets = disasm




[env:t1meter-test-OTA]
upload_port             = 192.168.1.185
monitor_port            = /dev/ttyUSB1
monitor_echo            = yes
# monitor_filters         = log2file, time, default, esp8266_exception_decoder
monitor_filters         = log2file, time, default
build_type              = debug
build_flags             = ${common.build_flags} -DTEST_MODE
                          -DNDEBUG 
                          -DDEBUG_SERIAL="Serial"
#                          -DPIO_FRAMEWORK_ARDUINO_ENABLE_EXCEPTIONS
#                           -DPIO_FRAMEWORK_ARDUINO_MMU_CACHE16_IRAM48
#                           -DVTABLES_IN_FLASH
#                           -DFP_IN_IROM
#                           -fexceptions
# std=c++11
# lib_archive                 = no
# lib_ldf_mode                = chain
# lib_compat_mode             = strict
upload_protocol         = espota
lib_extra_dirs          =



[env:t1meter-test-OTA-ssid8]
upload_port             = 10.42.1.125
monitor_port            = /dev/ttyUSB0
monitor_filters         = log2file, time, default
build_flags             = ${common.build_flags} -DTEST_MODE
                          -DNDEBUG 
upload_protocol         = espota
lib_extra_dirs          =



[env:t1meter-test-USB_241]
# platform                = espressif8266
# espressif8266@2.5.3 loads fromework 2.7.1
; platform               = espressif8266@2.5.3
platform                = platformio/espressif8266 @ 1.7.0
build_type 				= debug 
# upload_port             = /dev/ttyUSB1
upload_port             = 192.168.1.185
monitor_port            = /dev/ttyUSB1
# monitor_filters         = log2file, time, default, esp8266_exception_decoder
monitor_filters         = log2file, time, default, colorize
build_flags             = ${common.build_flags} -DTEST_MODE
                          -DNDEBUG 
#                        -DPIO_FRAMEWORK_ARDUINO_ENABLE_EXCEPTIONS
#                        -fexceptions ; causes section `.text' will not fit in region `iram1_0_seg
lib_extra_dirs          =



[env:t1meter-test-USB]

build_type 				= debug 
upload_port             = /dev/ttyUSB0
monitor_port            = /dev/ttyUSB0
monitor_filters         = log2file, time, default
build_flags             = ${common.build_flags} -DTEST_MODE
                          -DNDEBUG 
lib_extra_dirs          =



[env:t1meter-test-USB-exception]

build_type 				= debug 
upload_port             = /dev/ttyUSB0
monitor_port            = /dev/ttyUSB0
monitor_filters         = log2file, time, default, esp8266_exception_decoder
build_flags             = ${common.build_flags} -DTEST_MODE
;                            -DDEBUG 
                            -DPIO_FRAMEWORK_ARDUINO_ENABLE_EXCEPTIONS
;                            -fexceptions ; causes section `.text' will not fit in region `iram1_0_seg
lib_extra_dirs          =

;
; v55 ------------------- below is used to exactly duplicate production for accceptance
;                         only difference is IP address .185 iso  .35
;                         and 21../11.. to  version 41../31.. using  d1/e1 prefix iso p1/t1
;
; /home/pafoxp/.platformio/platforms/espressif8266@1.7.0/platform.py --> arduino 2.4.1
; /home/pafoxp/.platformio/platforms/espressif8266@2.5.3/platform.py --> arduino 2.7.1
;       /home/pafoxp/.platformio/packages/framework-arduinoespressif8266@3.20701.0/platform.txt
;       /home/pafoxp/.platformio/platforms/espressif8266@2.5.3/platform.json
;
[env:p1meter-dup-production_241]
# monitor_port            = /dev/ttyUSB0
#   read: [https://pyserial.readthedocs.io/en/latest/url_handlers.html]
# espressif8266@2.5.3 loads fromework 2.7.1
; platform                = espressif8266@2.5.3
platform                = platformio/espressif8266 @ 1.7.0
monitor_port            = /dev/ttyUSB1
; monitor_filters         = log2file, time, default, esp8266_exception_decoder
monitor_filters         = log2file, time, default
upload_port             = 192.168.1.185
; upload_port             = /dev/ttyUSB1
upload_protocol         = espota
build_flags             = ${common.build_flags} -DPROD_MODE
                          -DNDEBUG
                          -DDUP_MODE
;                          -v
;                          -print-search-dirs
                         ; -DDUP_MODE_NOINVERT = flag to use/r USB/serial for communications, else use inverted polarity

; add disassemble via /home/pafoxp/code-P1Meter/post_build.py to firmware.lst
; read: https://docs.platformio.org/en/latest/scripting/custom_targets.html
;extra_scripts = post_build.py
;targets = disasm

[env:p1meter-dup-production_271]
# monitor_port            = /dev/ttyUSB0
#   read: [https://pyserial.readthedocs.io/en/latest/url_handlers.html]
# espressif8266@2.5.3 loads fromework 2.7.1
platform                = espressif8266@2.5.3
monitor_port            = /dev/ttyUSB1
; monitor_filters         = log2file, time, default, esp8266_exception_decoder
monitor_filters         = log2file, time, default
upload_port             = 192.168.1.185
; upload_port             = /dev/ttyUSB1
upload_protocol         = espota
build_flags             = ${common.build_flags} -DPROD_MODE
                          -DNDEBUG
                          -DDUP_MODE
;                          -v
                         ; -DDUP_MODE_NOINVERT = flag to use/r USB/serial for communications, else use inverted polarity
extra_scripts = post_build_271.py ; script hardcoded as /home/pafoxp/code-P1Meter/post_build.py dos not know: FRAMEWORK_ARDUINOESP8266_DIR
targets = disasm
; ----------------------------------------------------------------------------
